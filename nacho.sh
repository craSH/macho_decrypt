#!/bin/bash
#!/bin/bash

OTOOL=$(which otool) || (echo "otool not found, aborting."; exit 1)
GDB=$(which gdb) || (echo "gdb not found, aborting."; exit 1)

encr_bin=$1
dest_bin=$2

mach_header=$($OTOOL -Vh $encr_bin | grep "MH_MAGIC")

cryptid=$($OTOOL -Vl $encr_bin | grep -A5 "LC_ENCRYPTION_INFO" | grep '^ *cryptid' | awk '{print $2}')

if [ "1" == "$cryptid" ]; then
	echo "$encr_bin appears to be encrypted (cryptid == 1): Continuing"
else
	echo "$encr_bin does NOT appear to be encrypted (cryptid != 1): Continuing anyways..."
fi

# Number of bytes offset from 0, in decimal
cryptoff=$($OTOOL -Vl $encr_bin | grep -A5 "LC_ENCRYPTION_INFO" | grep ' *cryptoff' | awk '{print $2}')

# Number of encrypted bytes from offset, in decimal
cryptsize=$($OTOOL -Vl $encr_bin | grep -A5 "LC_ENCRYPTION_INFO" | grep ' *cryptsize' | awk '{print $2}')

# Offset of the __TEXT section of the binary, in hex
vmoffset=$($OTOOL -Vl $encr_bin | grep -A5 "segname __TEXT" | grep ' *vmaddr' | awk '{print $2}')

# Offset from 0 in the file of the encrypted portion of the binary in memory, in decimal
enc_mem_offset=$(($cryptoff+$vmoffset))

# Offset from 0 in the file to the end of the encryption portion of the binary in memory, in decimal
enc_mem_end=$(($enc_mem_offset+$cryptsize))

gdb_breakpoint="UIApplicationMain"
#gdb_breakpoint="start"
gdb_dump_cmd="dump binary memory $dest_bin $enc_mem_offset $enc_mem_end"

# Some apps don't responsd well to starting in a debugger, but attaching after the fact works. Alter GDB interaction as needed.
running_pid=$(ps auxw | grep -i $1 | grep -v grep | awk '{print $2}')

cat <<EOF | gdb $encr_bin >/dev/null 2>&1
#break $gdb_breakpoint
#y
attach $running_pid
$gdb_dump_cmd
quit
y
EOF

if [ -e "$dest_bin" ]; then
	echo "Decrypted output placed in $dest_bin !"
	echo ""
	echo "Next, copy $encr_bin and $dest_bin to an OSX machine and extract the host arch binary out of them, if it's armv7, run:"
	echo "lipo -thin armv7 -output {encr_bin}.patched $encr_bin"
	echo ""
	#echo "Verify with: otool -arch all -Vh ${encr_bin}.patched - there should only be one Mach header present"
	#echo "Then patch the plaintext code into the binary:"
	#echo "dd bs=1 seek=$cryptoff conv=notrunc if=$dest_bin of=${encr_bin}.patched"
	#echo "You then must patch the crypdid field to be 0x0, find the offset with MachOView, then:"
	#echo "dd bs=1 seek=<<cryptid_offset>> conv=notrunc count=1 if=/dev/zero of=${encr_bin}.patched"
	echo "Then, patch the binary with the unencrypted segment, and modify the cryptid field to 0x000000 - this can be done with the following command:"
	echo "python macho_patch_nocrypt.py ${encr_bin} $dest_bin $cryptoff $cryptsize"
else
	echo "No ouput appears to have been generated by the GDB dump command, investigate."
fi
